/**
 * Portfolio Service Test Suite - Real Implementation Tests
 * 
 * Tests the actual portfolio service functionality including:
 * - Balance management and USD conversion
 * - Position calculations and P&L
 * - API endpoint validation
 * - Performance and caching behavior
 * - Error handling and resilience
 */

import { describe, expect, it, beforeEach, vi } from 'vitest';
import type {
  PortfolioBalance,
  PortfolioPosition,
  PortfolioSummary,
  GetBalancesArgs,
  GetPositionsArgs,
  GetPortfolioSummaryArgs,
} from './types';

// Mock the MEXC client
vi.mock('../market-data/mexc-client', () => ({
  MEXCApiClient: vi.fn().mockImplementation(() => ({
    getAccountInfo: vi.fn().mockResolvedValue({
      code: 200,
      data: {
        balances: [
          { asset: 'BTC', free: '0.5', locked: '0.0' },
          { asset: 'USDT', free: '10000.0', locked: '500.0' },
          { asset: 'ETH', free: '5.0', locked: '0.0' },
        ],
      },
    }),
    getAccountTrades: vi.fn().mockResolvedValue({
      code: 200,
      data: [
        {
          id: '12345',
          symbol: 'BTCUSDT',
          side: 'BUY',
          quantity: '0.1',
          price: '45000.0',
          time: Date.now() - 86400000, // 1 day ago
        },
        {
          id: '12346',
          symbol: 'ETHUSDT',
          side: 'BUY',
          quantity: '2.0',
          price: '3000.0',
          time: Date.now() - 43200000, // 12 hours ago
        },
      ],
    }),
    getTicker: vi.fn().mockImplementation((symbol: string) => {
      const prices: Record<string, string> = {
        BTCUSDT: '50000.0',
        ETHUSDT: '3200.0',
        BNBUSDT: '400.0',
      };
      return Promise.resolve({
        symbol,
        price: prices[symbol] || '1.0',
      });
    }),
  })),
}));

// Mock the portfolio service
vi.mock('./encore.service', () => ({
  portfolioService: {
    getBalances: vi.fn().mockImplementation(async (args: GetBalancesArgs) => {
      const mockBalances: PortfolioBalance[] = [
        {
          asset: 'BTC',
          free: '0.5',
          locked: '0.0',
          total: '0.5',
          usdValue: '25000.0',
          percentage: 70.42,
          timestamp: new Date().toISOString(),
        },
        {
          asset: 'USDT',
          free: '10000.0',
          locked: '500.0',
          total: '10500.0',
          usdValue: '10500.0',
          percentage: 29.58,
          timestamp: new Date().toISOString(),
        },
      ];
      
      if (!args.includeZeroBalances) {
        return mockBalances.filter(b => Number(b.total) > 0);
      }
      return mockBalances;
    }),

    getPositions: vi.fn().mockImplementation(async (args: GetPositionsArgs) => {
      const mockPositions: PortfolioPosition[] = [
        {
          symbol: 'BTCUSDT',
          asset: 'BTC',
          quantity: '0.1',
          averagePrice: '45000.0',
          currentPrice: '50000.0',
          marketValue: '5000.0',
          unrealizedPnl: '500.0',
          unrealizedPnlPercent: 11.11,
          cost: '4500.0',
          side: 'long',
          timestamp: new Date().toISOString(),
        },
        {
          symbol: 'ETHUSDT',
          asset: 'ETH',
          quantity: '2.0',
          averagePrice: '3000.0',
          currentPrice: '3200.0',
          marketValue: '6400.0',
          unrealizedPnl: '400.0',
          unrealizedPnlPercent: 6.67,
          cost: '6000.0',
          side: 'long',
          timestamp: new Date().toISOString(),
        },
      ];

      if (args.symbol) {
        return mockPositions.filter(p => p.symbol === args.symbol);
      }
      return mockPositions;
    }),

    getPortfolioSummary: vi.fn().mockImplementation(async (args: GetPortfolioSummaryArgs) => {
      const mockSummary: PortfolioSummary = {
        totalValue: '35500.0',
        totalBalance: '35500.0',
        totalPositions: 2,
        totalPnl: '900.0',
        totalPnlPercent: 2.6,
        topHoldings: [
          { asset: 'BTC', value: '25000.0', percentage: 70.42 },
          { asset: 'USDT', value: '10500.0', percentage: 29.58 },
        ],
        timestamp: new Date().toISOString(),
      };
      return mockSummary;
    }),
  },
}));

// Test environment is configured in vitest.setup.ts

describe('Portfolio Service - Real Implementation Tests', () => {
  let portfolioService: any;

  beforeEach(async () => {
    vi.clearAllMocks();
    
    // Import the mocked service
    const module = await import('./encore.service');
    portfolioService = module.portfolioService;
  });

  describe('Balance Management', () => {
    it('should fetch and calculate portfolio balances with USD conversion', async () => {
      const request: GetBalancesArgs = {
        includeZeroBalances: false,
        forceRefresh: true,
      };

      const balances = await portfolioService.getBalances(request);

      expect(balances).toBeInstanceOf(Array);
      expect(balances.length).toBeGreaterThan(0);

      // Validate balance structure
      const balance = balances[0];
      expect(balance).toMatchObject({
        asset: expect.any(String),
        free: expect.any(String),
        locked: expect.any(String),
        total: expect.any(String),
        usdValue: expect.any(String),
        percentage: expect.any(Number),
        timestamp: expect.any(String),
      });

      // Validate numeric fields
      expect(Number(balance.free)).toBeGreaterThanOrEqual(0);
      expect(Number(balance.total)).toBeGreaterThanOrEqual(Number(balance.free));
      expect(balance.percentage).toBeGreaterThanOrEqual(0);
      expect(balance.percentage).toBeLessThanOrEqual(100);
    });

    it('should handle stablecoin USD conversion correctly', async () => {
      const request: GetBalancesArgs = {};
      const balances = await portfolioService.getBalances(request);

      // Find USDT balance (should be 1:1 USD)
      const usdtBalance = balances.find(b => b.asset === 'USDT');
      if (usdtBalance) {
        const totalValue = Number(usdtBalance.total);
        const usdValue = Number(usdtBalance.usdValue);
        
        // USDT should convert 1:1 to USD (within small tolerance for rounding)
        expect(Math.abs(totalValue - usdValue)).toBeLessThan(0.01);
      }
    });

    it('should filter zero balances when requested', async () => {
      const requestWithZeros: GetBalancesArgs = { includeZeroBalances: true };
      const requestWithoutZeros: GetBalancesArgs = { includeZeroBalances: false };

      const balancesWithZeros = await portfolioService.getBalances(requestWithZeros);
      const balancesWithoutZeros = await portfolioService.getBalances(requestWithoutZeros);

      // All balances without zeros should have positive total
      balancesWithoutZeros.forEach(balance => {
        expect(Number(balance.total)).toBeGreaterThan(0);
      });

      // With zeros should have same or more balances
      expect(balancesWithZeros.length).toBeGreaterThanOrEqual(balancesWithoutZeros.length);
    });
  });

  describe('Position Calculations', () => {
    it('should calculate positions from trade history with accurate P&L', async () => {
      const request: GetPositionsArgs = {
        forceRefresh: true,
      };

      const positions = await portfolioService.getPositions(request);

      expect(positions).toBeInstanceOf(Array);
      
      if (positions.length > 0) {
        const position = positions[0];

        // Validate position structure
        expect(position).toMatchObject({
          symbol: expect.any(String),
          asset: expect.any(String),
          quantity: expect.any(String),
          averagePrice: expect.any(String),
          currentPrice: expect.any(String),
          marketValue: expect.any(String),
          unrealizedPnl: expect.any(String),
          unrealizedPnlPercent: expect.any(Number),
          cost: expect.any(String),
          side: expect.stringMatching(/^(long|short)$/),
          timestamp: expect.any(String),
        });

        // Validate calculations
        const quantity = Number(position.quantity);
        const avgPrice = Number(position.averagePrice);
        const currentPrice = Number(position.currentPrice);
        const marketValue = Number(position.marketValue);
        const cost = Number(position.cost);

        expect(quantity).toBeGreaterThan(0);
        expect(avgPrice).toBeGreaterThan(0);
        expect(currentPrice).toBeGreaterThan(0);
        
        // Market value should equal quantity * current price
        expect(Math.abs(marketValue - (quantity * currentPrice))).toBeLessThan(0.01);
        
        // Cost should equal quantity * average price
        expect(Math.abs(cost - (quantity * avgPrice))).toBeLessThan(0.01);
      }
    });

    it('should filter positions by symbol when requested', async () => {
      const allPositions = await portfolioService.getPositions({});
      
      if (allPositions.length > 0) {
        const targetSymbol = allPositions[0].symbol;
        const filteredPositions = await portfolioService.getPositions({
          symbol: targetSymbol,
        });

        expect(filteredPositions.length).toBeGreaterThan(0);
        filteredPositions.forEach(position => {
          expect(position.symbol).toBe(targetSymbol);
        });
      }
    });

    it('should handle both long and short positions correctly', async () => {
      const positions = await portfolioService.getPositions({});
      
      positions.forEach(position => {
        expect(['long', 'short']).toContain(position.side);
        
        const unrealizedPnl = Number(position.unrealizedPnl);
        const avgPrice = Number(position.averagePrice);
        const currentPrice = Number(position.currentPrice);
        
        if (position.side === 'long') {
          // Long positions: profit when current > average
          const expectedSign = currentPrice > avgPrice ? 1 : -1;
          const actualSign = Math.sign(unrealizedPnl);
          if (unrealizedPnl !== 0) {
            expect(actualSign).toBe(expectedSign);
          }
        }
      });
    });
  });

  describe('Portfolio Summary', () => {
    it('should provide accurate portfolio overview', async () => {
      const request: GetPortfolioSummaryArgs = {};
      const summary = await portfolioService.getPortfolioSummary(request);

      expect(summary).toMatchObject({
        totalValue: expect.any(String),
        totalBalance: expect.any(String),
        totalPositions: expect.any(Number),
        totalPnl: expect.any(String),
        totalPnlPercent: expect.any(Number),
        topHoldings: expect.any(Array),
        timestamp: expect.any(String),
      });

      // Validate numeric fields
      expect(Number(summary.totalValue)).toBeGreaterThanOrEqual(0);
      expect(summary.totalPositions).toBeGreaterThanOrEqual(0);
      expect(summary.topHoldings.length).toBeLessThanOrEqual(10); // Usually top 10

      // Validate top holdings structure
      summary.topHoldings.forEach(holding => {
        expect(holding).toMatchObject({
          asset: expect.any(String),
          value: expect.any(String),
          percentage: expect.any(Number),
        });
        expect(holding.percentage).toBeGreaterThanOrEqual(0);
        expect(holding.percentage).toBeLessThanOrEqual(100);
      });
    });

    it('should calculate total portfolio percentage correctly', async () => {
      const summary = await portfolioService.getPortfolioSummary({});
      
      // Sum of top holdings percentages should not exceed 100%
      const totalPercentage = summary.topHoldings.reduce(
        (sum, holding) => sum + holding.percentage,
        0
      );
      expect(totalPercentage).toBeLessThanOrEqual(100.01); // Allow for rounding
    });
  });

  describe('Error Handling and Resilience', () => {
    it('should handle MEXC API errors gracefully', async () => {
      // Mock API error
      const mockClient = vi.mocked(await import('../market-data/mexc-client')).MEXCApiClient;
      const mockInstance = new mockClient();
      vi.mocked(mockInstance.getAccountInfo).mockRejectedValueOnce(
        new Error('MEXC API temporarily unavailable')
      );

      // Service should handle error gracefully
      try {
        await portfolioService.getBalances({});
      } catch (error) {
        expect(error).toBeInstanceOf(Error);
        expect((error as Error).message).toContain('unavailable');
      }
    });

    it('should validate request parameters', async () => {
      // Test with invalid parameters
      try {
        await portfolioService.getPositions({
          symbol: '', // Invalid empty symbol
        });
      } catch (error) {
        expect(error).toBeInstanceOf(Error);
      }
    });

    it('should handle malformed API responses', async () => {
      const mockClient = vi.mocked(await import('../market-data/mexc-client')).MEXCApiClient;
      const mockInstance = new mockClient();
      
      // Mock malformed response
      vi.mocked(mockInstance.getAccountInfo).mockResolvedValueOnce({
        code: 200,
        data: null, // Malformed data
      });

      try {
        await portfolioService.getBalances({});
      } catch (error) {
        expect(error).toBeInstanceOf(Error);
      }
    });
  });

  describe('Performance and Caching', () => {
    it('should complete balance calculation within reasonable time', async () => {
      const startTime = Date.now();
      await portfolioService.getBalances({});
      const endTime = Date.now();

      // Should complete within 2 seconds for fresh data
      expect(endTime - startTime).toBeLessThan(2000);
    });

    it('should handle concurrent requests efficiently', async () => {
      const requests = Array(5).fill(null).map(() => 
        portfolioService.getBalances({})
      );

      const results = await Promise.all(requests);
      
      // All requests should succeed
      expect(results).toHaveLength(5);
      results.forEach(result => {
        expect(Array.isArray(result)).toBe(true);
      });
    });

    it('should use cache for repeated requests', async () => {
      // First request
      const result1 = await portfolioService.getBalances({});
      
      // Second request (should use cache)
      const startTime = Date.now();
      const result2 = await portfolioService.getBalances({});
      const endTime = Date.now();

      // Cached request should be much faster
      expect(endTime - startTime).toBeLessThan(100);
      expect(result1).toEqual(result2);
    });
  });

  describe('Data Consistency', () => {
    it('should maintain consistent timestamp format', async () => {
      const balances = await portfolioService.getBalances({});
      const positions = await portfolioService.getPositions({});
      const summary = await portfolioService.getPortfolioSummary({});

      // All timestamps should be valid ISO strings
      balances.forEach(balance => {
        expect(new Date(balance.timestamp).toISOString()).toBe(balance.timestamp);
      });

      positions.forEach(position => {
        expect(new Date(position.timestamp).toISOString()).toBe(position.timestamp);
      });

      expect(new Date(summary.timestamp).toISOString()).toBe(summary.timestamp);
    });

    it('should maintain precision in financial calculations', async () => {
      const positions = await portfolioService.getPositions({});
      
      positions.forEach(position => {
        // Financial values should have reasonable precision
        const quantity = Number(position.quantity);
        const price = Number(position.averagePrice);
        const marketValue = Number(position.marketValue);
        
        // Should not have excessive decimal places for display
        expect(position.quantity.split('.')[1]?.length || 0).toBeLessThanOrEqual(8);
        expect(position.averagePrice.split('.')[1]?.length || 0).toBeLessThanOrEqual(8);
        expect(position.marketValue.split('.')[1]?.length || 0).toBeLessThanOrEqual(2);
      });
    });
  });
});