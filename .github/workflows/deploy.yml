name: Deploy to Encore Cloud

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  ENCORE_INSTALL_ID: ${{ secrets.ENCORE_INSTALL_ID }}

jobs:
  deploy:
    name: Deploy to Encore Cloud
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Run quality checks
        run: |
          echo "üîç Running type check..."
          bun run type-check
          
          echo "üßπ Running linting..."
          bun run lint
          
          echo "üß™ Running tests..."
          bun test
          
          echo "‚úÖ All quality checks passed!"
          
      - name: Install Encore CLI
        run: |
          curl -L https://encore.dev/install.sh | bash
          echo "$HOME/.encore/bin" >> $GITHUB_PATH
          
      - name: Authenticate with Encore
        run: |
          encore auth login --token ${{ secrets.ENCORE_AUTH_TOKEN }}
          
      - name: Set environment variables
        run: |
          ENV_NAME="${{ github.event.inputs.environment || 'staging' }}"
          
          # Set MEXC API credentials
          encore secret set --env=$ENV_NAME MEXC_API_KEY "${{ secrets.MEXC_API_KEY }}"
          encore secret set --env=$ENV_NAME MEXC_SECRET_KEY "${{ secrets.MEXC_SECRET_KEY }}"
          
          echo "‚úÖ Environment variables set for $ENV_NAME"
          
      - name: Deploy to Encore Cloud
        run: |
          ENV_NAME="${{ github.event.inputs.environment || 'staging' }}"
          
          if [ "$ENV_NAME" = "production" ]; then
            echo "üöÄ Deploying to production..."
            encore deploy --env=production
          else
            echo "üöÄ Deploying to staging..."
            encore deploy --env=staging
          fi
          
      - name: Get deployment URL
        id: deployment
        run: |
          ENV_NAME="${{ github.event.inputs.environment || 'staging' }}"
          DEPLOYMENT_URL=$(encore app show --env=$ENV_NAME --json | jq -r '.app_url')
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployment successful: $DEPLOYMENT_URL"
          
      - name: Health check
        run: |
          DEPLOYMENT_URL="${{ steps.deployment.outputs.deployment_url }}"
          
          echo "üè• Running health check..."
          
          # Wait for deployment to be ready
          sleep 30
          
          # Check health endpoint
          HEALTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL/health")
          
          if [ "$HEALTH_RESPONSE" = "200" ]; then
            echo "‚úÖ Health check passed!"
          else
            echo "‚ùå Health check failed with status: $HEALTH_RESPONSE"
            exit 1
          fi
          
      - name: Notify deployment status
        if: always()
        run: |
          ENV_NAME="${{ github.event.inputs.environment || 'staging' }}"
          DEPLOYMENT_URL="${{ steps.deployment.outputs.deployment_url }}"
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Deployment to $ENV_NAME successful!"
            echo "üåê URL: $DEPLOYMENT_URL"
          else
            echo "‚ùå Deployment to $ENV_NAME failed!"
          fi
